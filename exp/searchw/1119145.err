[[15:38:1615:38:16] ] /opt/dgl/src/runtime/tensordispatch.cc/opt/dgl/src/runtime/tensordispatch.cc::4343: : TensorDispatcher: dlopen failed: TensorDispatcher: dlopen failed: /public1/home/scfa1517/anaconda3/envs/myenv/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory/public1/home/scfa1517/anaconda3/envs/myenv/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory

[Using backend: pytorch
Using backend: pytorch
15:38:16] /opt/dgl/src/runtime/tensordispatch.cc:[4315:38:16: ] TensorDispatcher: dlopen failed: /opt/dgl/src/runtime/tensordispatch.cc/public1/home/scfa1517/anaconda3/envs/myenv/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory:
43: Using backend: pytorch
TensorDispatcher: dlopen failed: /public1/home/scfa1517/anaconda3/envs/myenv/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory
[Using backend: pytorch
15:38:16] /opt/dgl/src/runtime/tensordispatch.cc:43: TensorDispatcher: dlopen failed: /public1/home/scfa1517/anaconda3/envs/myenv/lib/python3.9/site-packages/dgl/tensoradapter/pytorch/libtensoradapter_pytorch_1.10.2.so: cannot open shared object file: No such file or directory
Using backend: pytorch
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:137: ComplexWarning: Casting complex values to real discards the imaginary part
  hks[i] = np.array([np.sum(np.exp(-eigenvalues*t)*eigenvectors[i]*eigenvectors[i]) for t in sample_points])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:101: ComplexWarning: Casting complex values to real discards the imaginary part
  wks[i] = np.array([np.sum(np.exp(-(e-log_eigenvalue)*(e-log_eigenvalue)/(2*sigma*sigma))*eigenvectors[i]*eigenvectors[i])/np.sum(np.exp(-(e-log_eigenvalue)*(e-log_eigenvalue)/(2*sigma*sigma))) for e in sample_points])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:101: RuntimeWarning: overflow encountered in cfloat_scalars
  wks[i] = np.array([np.sum(np.exp(-(e-log_eigenvalue)*(e-log_eigenvalue)/(2*sigma*sigma))*eigenvectors[i]*eigenvectors[i])/np.sum(np.exp(-(e-log_eigenvalue)*(e-log_eigenvalue)/(2*sigma*sigma))) for e in sample_points])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:101: RuntimeWarning: invalid value encountered in cfloat_scalars
  wks[i] = np.array([np.sum(np.exp(-(e-log_eigenvalue)*(e-log_eigenvalue)/(2*sigma*sigma))*eigenvectors[i]*eigenvectors[i])/np.sum(np.exp(-(e-log_eigenvalue)*(e-log_eigenvalue)/(2*sigma*sigma))) for e in sample_points])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:137: ComplexWarning: Casting complex values to real discards the imaginary part
  hks[i] = np.array([np.sum(np.exp(-eigenvalues*t)*eigenvectors[i]*eigenvectors[i]) for t in sample_points])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:137: ComplexWarning: Casting complex values to real discards the imaginary part
  hks[i] = np.array([np.sum(np.exp(-eigenvalues*t)*eigenvectors[i]*eigenvectors[i]) for t in sample_points])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:101: ComplexWarning: Casting complex values to real discards the imaginary part
  wks[i] = np.array([np.sum(np.exp(-(e-log_eigenvalue)*(e-log_eigenvalue)/(2*sigma*sigma))*eigenvectors[i]*eigenvectors[i])/np.sum(np.exp(-(e-log_eigenvalue)*(e-log_eigenvalue)/(2*sigma*sigma))) for e in sample_points])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:158: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  matrices = np.array([signature_method(graph,sample_method,T) for graph in graphs])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:164: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([GetNodeAttrMat(g) for g in graphs])
Traceback (most recent call last):
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/main.py", line 215, in <module>
    main()
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/main.py", line 114, in main
    wasserstein_distances = wass_dis.pairwise_wasserstein_distance(graphs,args.hlen,signature_dict[args.method],sampleways_dict[args.method][args.samplemethods],ws,args.sinkhorn)
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/wass_dis.py", line 23, in pairwise_wasserstein_distance
    wasserstein_distances.append(_compute_wasserstein_distance(np.concatenate((w*node_signature_matrice,(1-w)*node_attr_matrice),axis=2), 
  File "<__array_function__ internals>", line 5, in concatenate
numpy.AxisError: axis 2 is out of bounds for array of dimension 1
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:158: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  matrices = np.array([signature_method(graph,sample_method,T) for graph in graphs])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:164: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([GetNodeAttrMat(g) for g in graphs])
Traceback (most recent call last):
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/main.py", line 215, in <module>
    main()
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/main.py", line 114, in main
    wasserstein_distances = wass_dis.pairwise_wasserstein_distance(graphs,args.hlen,signature_dict[args.method],sampleways_dict[args.method][args.samplemethods],ws,args.sinkhorn)
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/wass_dis.py", line 23, in pairwise_wasserstein_distance
    wasserstein_distances.append(_compute_wasserstein_distance(np.concatenate((w*node_signature_matrice,(1-w)*node_attr_matrice),axis=2), 
  File "<__array_function__ internals>", line 5, in concatenate
numpy.AxisError: axis 2 is out of bounds for array of dimension 1
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:158: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  matrices = np.array([signature_method(graph,sample_method,T) for graph in graphs])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:164: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([GetNodeAttrMat(g) for g in graphs])
Traceback (most recent call last):
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/main.py", line 215, in <module>
    main()
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/main.py", line 114, in main
    wasserstein_distances = wass_dis.pairwise_wasserstein_distance(graphs,args.hlen,signature_dict[args.method],sampleways_dict[args.method][args.samplemethods],ws,args.sinkhorn)
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/wass_dis.py", line 23, in pairwise_wasserstein_distance
    wasserstein_distances.append(_compute_wasserstein_distance(np.concatenate((w*node_signature_matrice,(1-w)*node_attr_matrice),axis=2), 
  File "<__array_function__ internals>", line 5, in concatenate
numpy.AxisError: axis 2 is out of bounds for array of dimension 1
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:158: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  matrices = np.array([signature_method(graph,sample_method,T) for graph in graphs])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:164: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([GetNodeAttrMat(g) for g in graphs])
Traceback (most recent call last):
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/main.py", line 215, in <module>
    main()
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/main.py", line 114, in main
    wasserstein_distances = wass_dis.pairwise_wasserstein_distance(graphs,args.hlen,signature_dict[args.method],sampleways_dict[args.method][args.samplemethods],ws,args.sinkhorn)
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/wass_dis.py", line 23, in pairwise_wasserstein_distance
    wasserstein_distances.append(_compute_wasserstein_distance(np.concatenate((w*node_signature_matrice,(1-w)*node_attr_matrice),axis=2), 
  File "<__array_function__ internals>", line 5, in concatenate
numpy.AxisError: axis 2 is out of bounds for array of dimension 1
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:158: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  matrices = np.array([signature_method(graph,sample_method,T) for graph in graphs])
/public1/home/scfa1517/HKS-Wasserstein-kernel/signature.py:164: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([GetNodeAttrMat(g) for g in graphs])
Traceback (most recent call last):
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/main.py", line 215, in <module>
    main()
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/main.py", line 114, in main
    wasserstein_distances = wass_dis.pairwise_wasserstein_distance(graphs,args.hlen,signature_dict[args.method],sampleways_dict[args.method][args.samplemethods],ws,args.sinkhorn)
  File "/public1/home/scfa1517/HKS-Wasserstein-kernel/wass_dis.py", line 23, in pairwise_wasserstein_distance
    wasserstein_distances.append(_compute_wasserstein_distance(np.concatenate((w*node_signature_matrice,(1-w)*node_attr_matrice),axis=2), 
  File "<__array_function__ internals>", line 5, in concatenate
numpy.AxisError: axis 2 is out of bounds for array of dimension 1
